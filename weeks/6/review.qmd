---
title: "Review"
author: "geshun"
format: ipynb
editor: visual
---

```{r}
reticulate::use_condaenv('base')
```

### About Dataset

The file `emergency-calls.csv` contains emergency calls recorded in `2021` in a major city in USA.

`Report Date`: The month data was recorded.

`Emergency Count`: The total number of emergency calls.

`Average Wait Time`: The average time (in minutes) to respond to an emergency call.

### To Do

Import the following packages: `pandas, matplotlib`

```{python}
import pandas as pd
import matplotlib.pyplot as plt
```

Read the `.csv` file as a `Pandas DataFrame`

```{python}
df = pd.read_csv('emergency-calls.csv')
```

How many observations and features are in the emergency dataset?

```{python}
df.shape
```

Does the dataset contain any missing values?

```{python}
df.isnull().mean().sum()
```

Plot the `DataFrame` . What can you say about the plot output?

```{python}
df.plot()
plt.show()
```

Plot the average wait time first as a `Series` and then as a `DataFrame`

```{python}
df['Average Wait Time'].plot()
plt.show()
```

```{python}
df[['Average Wait Time']].plot(color='#45f232')
plt.show()
```

The target is to have an average response time of `8` minutes. Find all records that are above this target.

```{python}
df[df['Average Wait Time'] > 8]
df.query('`Average Wait Time` > 8')
```

How can we establish if the columns are in the desired data types? Are there any type conversion you want to do?

```{python}
df.info()
```

Get the summary of the columns to know about the data distribution.

```{python}
df.describe()
```

Set the `Report Date` as the index of the `DataFrame`

```{python}
df.set_index(['Report Date'], inplace=True)
```

Plot the `DataFrame` again

```{python}
df.plot()
plt.show()
```

Convert the `Report Date` index to a datetime object and plot the `DataFrame` . Do you realize any difference in visualization?

```{python}
df.index = pd.to_datetime(df.index)
```

```{python}
df.plot()
plt.show()
```

Discuss the information or knowledge you have gained about the data

<div>

</div>

Reset the index of the `DataFrame` so that we have 3 columns

```{python}
df.reset_index(inplace=True)
```

The column names have space in them (and thus can be used as attributes of the `DataFrame`). Do this to verify `df.columns`. Replace the spaces with underscore `_` and convert to lower case. For instance, `Report Date` should be `report_date`

```{python}
# df.columns = [col.replace(" ", "_").lower() for col in df.columns]
# df.columns = ['report_date', 'emergency_count', 'average_wait_time']
df.rename(columns=lambda col: col.replace(" ", "_").lower(), inplace=True)
```

If the `report_date` field is not datetime object, convert it. Create a new column and call it `report_month` which contains the month name.

```{python}
df['report_month'] = df.report_date.dt.month_name()
```

Do you think the `report_month` field should be categorical? If yes how do you convert to categorical? Try providing order if you want to treat the field as categorical.

```{python}

```

Which months in `2021` recorded the maximum and minimum emergency call count?

```{python}
df[(df.emergency_count == df.emergency_count.max()) | (df.emergency_count == df.emergency_count.min())]
df.query('emergency_count == emergency_count.max() or emergency_count == emergency_count.min()')
```

```{python}
df.nlargest(1, 'emergency_count')
df.nsmallest(1, 'emergency_count')
pd.concat([df.nlargest(1, 'emergency_count'), df.nsmallest(1, 'emergency_count')])
```

Find the average call volume for each quarter of the year:

*You can create the `report_quarter` on the fly while grouping:*

```{python}
df.groupby(df.report_date.dt.quarter).mean().rename_axis('report_quarter')
```

```{python}
df['report_quarter'] = df.report_date.dt.quarter
df.groupby(['report_quarter'])['emergency_count'].mean()
```

Is there a correlation between call volume and response time? What can you say about the nature of the correlation?

```{python}
df.drop(['report_quarter'], axis=1, inplace=True)
df.corr()
```

Extract a feature from the Emergency Count that can be used as a base predictor for call volume in January 2022. Use the same principle to predict the average wait time.

```{python}
df.emergency_count.mean()
```
